# -*- coding: utf-8 -*-
# Copyright 2023 OpenSPG Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied.
import logging
from typing import List, Type, Union

from kag.interface import SplitterABC
from kag.builder.prompt.outline_prompt import OutlinePrompt
from kag.builder.model.chunk import Chunk
from kag.common.conf import KAG_PROJECT_CONF
from kag.common.utils import generate_hash_id
from kag.interface import LLMClient
from knext.common.base.runnable import Input, Output


logger = logging.getLogger(__name__)


@SplitterABC.register("outline")
class OutlineSplitter(SplitterABC):
    """
    A class for splitting chunks based on outlines generated by an LLM.

    This class inherits from SplitterABC and provides the functionality to split chunks
    into smaller chunks based on outlines generated by a Language Model (LLM).
    """

    def __init__(self, llm: LLMClient):
        """
        Initializes the OutlineSplitter with the specified LLM client.

        Args:
            llm (LLMClient): The LLM client used for generating outlines.
        """
        super().__init__()
        self.llm = llm
        self.prompt = OutlinePrompt(KAG_PROJECT_CONF.language)

    @property
    def input_types(self) -> Type[Input]:
        return Chunk

    @property
    def output_types(self) -> Type[Output]:
        return Chunk

    def outline_chunk(self, chunk: Union[Chunk, List[Chunk]]) -> List[Chunk]:
        """
        Generates outlines for the given chunk(s) and splits the content based on these outlines.

        Args:
            chunk (Union[Chunk, List[Chunk]]): A single Chunk object or a list of Chunk objects.

        Returns:
            List[Chunk]: A list of Chunk objects split by the generated outlines.
        """
        if isinstance(chunk, Chunk):
            chunk = [chunk]
        outlines = []
        for c in chunk:
            outline = self.llm.invoke({"input": c.content}, self.prompt)
            outlines.extend(outline)
        if len(outlines) == 0:
            return chunk
        content = "\n".join([c.content for c in chunk])
        chunks = self.sep_by_outline(content, outlines)
        return chunks

    def sep_by_outline(self, content, outlines):
        """
        Separates the content based on the provided outlines.

        Args:
            content (str): The content to be separated.
            outlines (List[str]): A list of outlines used to separate the content.

        Returns:
            List[Chunk]: A list of Chunk objects separated by the provided outlines.
        """
        position_check = []
        for outline in outlines:
            start = content.find(outline)
            position_check.append((outline, start))
        chunks = []
        for idx, pc in enumerate(position_check):
            chunk = Chunk(
                id=generate_hash_id(f"{pc[0]}#{idx}"),
                name=f"{pc[0]}#{idx}",
                content=content[
                    pc[1] : position_check[idx + 1][1]
                    if idx + 1 < len(position_check)
                    else len(position_check)
                ],
            )
            chunks.append(chunk)
        return chunks

    def _invoke(self, input: Input, **kwargs) -> List[Chunk]:
        """
        Invokes the splitting of the input chunk(s) based on the generated outlines.

        Args:
            input (Input): The chunk(s) to be split.
            **kwargs: Additional keyword arguments, currently unused but kept for potential future expansion.

        Returns:
            List[Chunk]: A list of Chunk objects resulting from the split operation.
        """
        chunks = self.outline_chunk(input)
        return chunks
